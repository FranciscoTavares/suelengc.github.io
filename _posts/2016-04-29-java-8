---
layout: post
title:  "Novidades do Java 8"
date:   2016-04-29
categories: java
tags: [java]
image: 
keywords:
related:
  - title: Excelente post no blog da Caelum sobre Java 8 
    url: http://blog.caelum.com.br/o-minimo-que-voce-deve-saber-de-java-8/
  - title: Apresentação sobre Java 8 por Paulo Silveira no Conexão Java 2014
    url: https://www.youtube.com/watch?v=UZaKFZHrnag
resumo: >
   Entenda quais são as novidades do Java 8. 
---

O Java 8 foi lançado em Março de 2014 e trouxe diversas inovações interessantes para a linguagem. Quando digo diversas, quero dizer muitas mesmo! De forma que, se um desenvolvedor java não se atualizar, pode num futuro próximo não entender mais um código que use Java 8!

Mas não se assuste! Ficaram muito bacanas as novas funcionalidades. Vale lembrar que é muitas dos recursos novos são novidades para o Java porém para linguagens como C# ou Scala já são recursos já existentes.


## Expressões Lambdas

Um dos recursos mais importantes desta versão 8 são as _Expressões Lambdas_, também conhecidas por _Closures_. Basicamente o principal objetivo dela é simplificar a codificação através de um alto nível de abstração.

## Métodos concretos em interfaces

Agora pode-se ter métodos concretos em interfaces. Este recurso é chamado _Default Method_ e permite evoluir uma interface sem quebrar a compatibilidade. Basta usar o modificador default que o método será herdado por todas as classes que implementem a interface. 
/*
Por exemplo, foi adicionado o método concreto "sort" a interface List
	
	default void sort(Comparator<? super E> c) {
	    Collections.sort(this, c);
	}

Outros métodos foram adicionados a 

API Collection:
	removeIf
	spliterator
	stream
	parallelStream

List
	replaceAll
	sort
	spliterator (override de Collection)

Map
	getOrDefault
	forEach
	replaceAll
	putIfAbsent
	remove
	replace (2 versões)
	computeIfAbsent
	computeIfPresent
	compute
	merge

Set
	spliterator (override)

Comparator
	métodos novos?

- Lambdas

A sintaxe do lambda do Java 8 só pode ser aplicada em interfaces funcionais (que recebem a anotação @FunctionalInterface), ou seja, uma interface com apenas um método abstrato. Métodos abstratos que são override de Object não contam pois qualquer classe que implemente a interface terá a implementação padrão de Object.

Como o único método abstrato desta interface é o int compare(T o1, T o2), o compilador pode inferir qual método que você está implementando, e desta forma podemos suprimir a assinatura do método passando diretamente para o nome dos parâmetros e apontando -> para a implementação direto.


Segue exemplo de Comparator com classe anônima:
	Comparator<String> ordenaPorTamanho = new Comparator<String>() {
		@Override
		public int compare(String s1, String s2) {
			return Integer.compare(s1.length(), s2.length());
		}
	};

E agora com a sintaxe lambda do Java 8:
	Comparator<String> comparador = (s1, s2) -> {
	  return Integer.compare(s1.length(), s2.length()); 
	};

Ou ainda mais enxuto, quando temos apenas uma instrução na implementação do método, podemos apontar direto para ela:
	Comparator<String> comparador = (s1, s2) -> Integer.compare(s1.length(), s2.length()); 

Ou ainda, passar tudo isso como argumento no método sort (eu acho que na maior parte das vezes a legibilidade fica comprometida, mas é possível ser feito):
	palavras.sort((s1, s2) -> Integer.compare(s1.length(), s2.length()));

Se o método só receber um único argumento, podemos suprimir os parênteses: 
	palavras.forEach(s -> System.out.println(s));

Você pode usar a sintaxe lambda em qualquer interface que seja considerada funcional, isso quer dizer, qualquer interface que passou a ter a anotação @FunctionalInterface.
	new Thread(() -> System.out.println("thread nova rodando")).start();



- Classes anônimas (novo???)